telegram_bot_project/
├── bot/
│   ├── __init__.py         # Порожній файл
│   ├── bot.py              # Основний код бота
│   └── config.py           # Налаштування
├── requirements.txt        # Залежності
├── run.py                  # Точка входу
└── .env                    # Змінні середовища
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import yt_dlp
import os
import asyncio
import subprocess

# Встановлення логування
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# Функція старту бота
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('Привіт! Надішліть мені посилання на YouTube відео, і я завантажу його для вас.')

# Асинхронна функція для зменшення розміру відео
async def resize_video(input_path, output_path, target_size_mb):
    loop = asyncio.get_event_loop()
    await loop.run_in_executor(None, actual_resize_video, input_path, output_path, target_size_mb)

# Синхронна функція для зменшення розміру відео
def actual_resize_video(input_path, output_path, target_size_mb):
    logger.info(f"Починаємо зменшення розміру відео: {input_path}")
    command = [
        'ffmpeg',
        '-i', input_path,
        '-vf', 'scale=-2:360',  # Зменшуємо розмір відео до 360p
        '-c:v', 'libx264',
        '-preset', 'fast',
        '-b:v', '500k',  # Зменшуємо бітрейт відео
        '-c:a', 'aac',
        '-b:a', '128k',
        '-y', output_path
    ]
    subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    logger.info(f"Завершено зменшення розміру відео: {output_path}")

# Функція завантаження відео
async def download_video(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    url = update.message.text
    if "youtube.com" in url or "youtu.be" in url:  # Перевірка, чи є це посиланням на YouTube
        try:
            logger.info(f"Починаємо завантаження відео з URL: {url}")
            ydl_opts = {
                'format': 'mp4',
                'outtmpl': 'videos/original_video.mp4',
            }
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                await asyncio.get_event_loop().run_in_executor(None, ydl.download, [url])
            logger.info("Завершено завантаження відео")

            # Зменшуємо розмір відео до 20 МБ
            await resize_video('videos/original_video.mp4', 'videos/resized_video.mp4', 20)
            
            # Відправка відео через Telegram
            logger.info("Починаємо відправку відео через Telegram")
            with open('videos/resized_video.mp4', 'rb') as video:
                await update.message.reply_video(video)
            logger.info("Відео успішно відправлено")
            await update.message.reply_text('Відео успішно завантажено та відправлено!')
        except Exception as e:
            logger.error(f"Помилка при завантаженні відео: {e}")
            await update.message.reply_text('Сталася помилка при завантаженні відео. Переконайтеся, що ви надіслали правильне посилання.')
        finally:
            # Очищення тимчасових файлів
            try:
                if os.path.exists('videos/original_video.mp4'):
                    os.remove('videos/original_video.mp4')
                if os.path.exists('videos/resized_video.mp4'):
                    os.remove('videos/resized_video.mp4')
            except PermissionError as e:
                logger.error(f"Помилка при видаленні файлу: {e}")
    else:
        await update.message.reply_text('Будь ласка, надішліть дійсне посилання на YouTube.')

def main() -> None:
    # Вставте свій токен Telegram бота тут
    token = '6725178780:AAHWvssEcozrJiDjiOAqC_zdqFJzGRrWYS8'

    application = ApplicationBuilder().token(token).read_timeout(60).write_timeout(60).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, download_video))

    application.run_polling()

if __name__ == '__main__':
    main()